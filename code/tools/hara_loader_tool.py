# File: code/tools/hara_loader_tool.py

from cat.mad_hatter.decorators import tool
from cat.log import log
import os

@tool(
    return_direct=True,
    examples=[
        "load HARA for Battery Management System",
        "load hara for wiper",
        "import HARA for steering"
    ]
)
def load_hara_for_fsc(tool_input, cat):
    """
    Load HARA outputs (safety goals with ASIL) for FSC development.
    
    Extracts:
    - Item/System name
    - Safety Goals
    - ASIL ratings
    - Safe States
    - FTTI (Fault Tolerant Time Interval)
    
    Sources (priority order):
    1. Working memory (if chained from HARA plugin)
    2. hara_inputs/ folder (uploaded files)
    3. Generated documents from HARA plugin
    
    Input: Item name or "use current HARA"
    Example: "load HARA for Battery Management System"
    """
    
    log.info("ðŸ”§ TOOL CALLED: load_hara_for_fsc")
    
    system_name = tool_input.strip()
    
    if not system_name:
        return "Error: Please specify the system name. Usage: load HARA for [system name]"
    
    try:
        # Import loader
        from ..loaders.hara_loader import HARALoader
        
        # Initialize loader
        plugin_folder = os.path.dirname(os.path.dirname(__file__))
        loader = HARALoader(plugin_folder)
        
        # Load HARA
        hara_data = loader.load_hara(system_name, cat)
        
        if not hara_data or not hara_data.goals:
            return f"Error: Could not find HARA data for {system_name}. Please check:\n" \
                   "1. HARA was generated by HARA Assistant plugin\n" \
                   "2. HARA file exists in hara_inputs/ folder\n" \
                   "3. System name matches exactly"
        
        # Store in working memory
        cat.working_memory['fsc_safety_goals'] = [sg.to_dict() for sg in hara_data.goals]
        cat.working_memory['system_name'] = system_name
        cat.working_memory['fsc_stage'] = 'hara_loaded'
        cat.working_memory['needs_formatting'] = True
        cat.working_memory['last_operation'] = 'hara_loaded'
        
        # âœ… SIMPLE PLAIN TEXT OUTPUT
        output = f"Successfully loaded HARA for {system_name}.\n\n"
        output += f"Found {len(hara_data.goals)} safety goals.\n\n"
        
        # List all safety goals in simple format
        for goal in hara_data.goals:
            output += f"Safety Goal {goal.id}: {goal.description}\n"
            output += f"  ASIL: {goal.asil}\n"
            output += f"  Safe State: {goal.safe_state}\n"
            if goal.ftti:
                output += f"  FTTI: {goal.ftti}\n"
            output += "\n"
        
        log.info(f"âœ… HARA loaded: {len(hara_data.goals)} goals for {system_name}")
        
        return output
        
    except Exception as e:
        log.error(f"Error loading HARA: {e}")
        import traceback
        log.error(traceback.format_exc())
        return f"Error loading HARA: {str(e)}"